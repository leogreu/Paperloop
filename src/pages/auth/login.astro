---
import "@/styles/globals.css";
import { actions } from "astro:actions";
import { CircleAlert } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
    Card,
    CardHeader,
    CardTitle,
    CardDescription,
    CardContent,
} from "@/components/ui/card";

import AppleIcon from "@/icons/brands/apple.svg?raw";
import GoogleIcon from "@/icons/brands/google.svg?raw";

import Layout from "@/components/custom/layout.astro";
import { defaultLocale, getPreferredLocale, getTranslations } from "@/utils/i18n.ts";

const { cookies, redirect } = Astro;
const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (accessToken && refreshToken) {
    return redirect("/docs");
}

interface Props {
    type?: "login" | "register";
};

const { type = "login" } = Astro.props;
const altType = type === "login" ? "register" : "login";

const result = Astro.getActionResult(actions[type]);
const locale = getPreferredLocale(Astro.request.headers) ?? defaultLocale;
const i18n = getTranslations(locale);
---

<Layout title={i18n(type)} description={type}>
    <form action={"/docs" + actions[type]} method="POST" class="h-full flex items-center justify-center">
        <Card className="max-w-sm">
            <CardHeader>
                <CardTitle className="text-2xl">
                    {i18n(type)}
                </CardTitle>
                <CardDescription>
                    {i18n(type + "-text")}
                </CardDescription>
            </CardHeader>
            <CardContent>
                <div class="grid gap-4">
                    <div class="grid gap-2">
                        <Label htmlFor="email">Email</Label>
                        <Input name="email" type="email" required/>
                    </div>
                    <div class="grid gap-2">
                        <div class="flex items-center">
                            <Label htmlFor="password">Password</Label>
                            {type === "login" &&
                                <a href="#" class="ml-auto inline-block text-sm underline">
                                    {i18n("forgot-password")}
                                </a>
                            }
                        </div>
                        <Input name="password" type="password" minLength={6} required />
                    </div>
                    {result?.error &&
                        <Alert className="bg-secondary">
                            <CircleAlert className="h-4 w-4" />
                            <AlertTitle>
                                {i18n("error")}
                            </AlertTitle>
                            <AlertDescription>
                                {i18n(type + "-error")}
                            </AlertDescription>
                        </Alert>
                    }
                    <Button type="submit" className="w-full">
                        {i18n(type)}
                    </Button>
                    <div class="relative my-2">
                        <div class="absolute inset-0 flex items-center">
                            <span class="w-full border-t" />
                        </div>
                        <div class="relative flex justify-center text-xs uppercase">
                            <span class="bg-background px-2 text-muted-foreground">
                                {i18n("or-continue-with")}
                            </span>
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <Button id="Google" variant="outline" className="w-full" disabled>
                            <div class="flex h-4 w-4 fill-primary">
                                <Fragment set:html={GoogleIcon} />
                            </div>
                        </Button>
                        <Button id="Apple" variant="outline" className="w-full" disabled>
                            <div class="flex h-5 w-5 fill-primary">
                                <Fragment set:html={AppleIcon} />
                            </div>
                        </Button>
                    </div>
                </div>
                <div class="mt-4 text-center text-sm">
                    {i18n(altType + "-alt-text")}
                    <a href={`/auth/${altType}`} class="underline">
                        {i18n(altType)}
                    </a>
                </div>
            </CardContent>
        </Card>
    </form>
</Layout>
