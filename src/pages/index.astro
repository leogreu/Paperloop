---
export const prerender = true;

import "@/styles/globals.css";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";

import Layout from "@/components/custom/layout.astro";
import DocumentRender from "@/components/custom/document-render.astro";
import { getTranslations } from "@/utils/i18n.ts";

// TODO: Currently only pre-rendered in English
const i18n = getTranslations("en");
---

<Layout title={i18n("new-document")} description={i18n("new-document")} locale={"en"}>
    <div class="mt-16 mx-auto max-w-2xl text-center">
        <Badge variant="secondary" className="px-3 py-1 text-md">
            Paperloop üìÑ‚ôªÔ∏è
        </Badge>
        <h1 class="mt-8 text-5xl font-extrabold tracking-tight leading-tight">
            Predictable, reusable, and versioned documents
        </h1>
        <h2 class="mt-8 text-xl font-normal tracking-tight text-slate-500 leading-snug">
            Paperloop let's you write documents with separated static and dynamic content: Easily manage invoices, offers, contracts, email templates, and more.
        </h1>
    </div>
    <div class="mt-32 mx-auto max-w-7xl h-[34rem] flex gap-2">
        <Card className="flex-1">
            <CardContent className="pt-6">
                <div id="typeit" class="whitespace-pre-line"></div>
            </CardContent>
        </Card>
        <Card className="flex-1">
            <CardContent className="pt-6">
                <DocumentRender></DocumentRender>
            </CardContent>
        </Card>
    </div>
    <hr class="mt-16 mb-6">
    <div class="flex justify-between text-sm text-slate-500">
        <p>
            ¬© 2024 Paperloop. All rights reserved.
        </p>
        <a href="/imprint">
            {i18n("imprint")}
        </a>
    </div>
</Layout>

<script>
    import TypeIt from "typeit";
    import { updateRender } from "@/utils/markdown";

    new TypeIt("#typeit", {
        speed: 50,
        deleteSpeed: 50,
        startDelay: 1000,
        afterStep: (instance: any) => {
            updateRender.setValue?.(instance.element.innerText.replace("|", ""));
        }
    })
        .type("**Paperloop, Inc.**\n", { delay: 400 })
        .type("John Doe\n", { delay: 400 })
        .type("1234 Innovation Drive\n", { delay: 400 })
        .type("Metropolis, CA 90210\n", { delay: 400 })
        // .move(null, { to: "START", delay: 800 })
        // .type("text-center:", { delay: 1200 })
        // .delete(7, { delay: 1200 })
        // .type("right:", { delay: 1200 })
        // .move(null, { to: "END" })
        .type("\n", { delay: 400 })
        .type("[Firstname] [Lastname]\n", { delay: 400 })
        .type("[Address]\n", { delay: 400 })
        .type("\n", { delay: 400 })
        .type("### Welcome to Paperloop! üëã\n", { delay: 400 })
        .type("\n", { delay: 400 })
        .type("Dear [Firstname],\n", { delay: 400 })
        .type("\n", { delay: 400 })
        .type("Thank you very much for visiting our website! ", { delay: 1200 })
        .type("You have just seen how to create a deterministic, reusable, and versioned letter template.\n", { delay: 1200 })
        .type("\n", { delay: 400 })
        .type("Create your free account and bring superpowers to your documents! üöÄ\n", { delay: 400 })
        .type("\n", { delay: 400 })
        .type("Best,\n", { delay: 400 })
        .type("Paperloop", { delay: 400 })
        .go();
</script>
