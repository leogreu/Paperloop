---
import "@/styles/globals.css";
import { db, Document, eq } from "astro:db";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

import Layout from "@/components/custom/layout.astro";
import { defaultLocale, getPreferredLocale, getTranslations } from "@/utils/i18n.ts";

const { slug } = Astro.params;
if (!slug) return;

const doc = await db.select().from(Document).where(eq(Document.id, slug)).get();
if (!doc) return;

const locale = getPreferredLocale(Astro.request.headers) ?? defaultLocale;
const i18n = getTranslations(locale);
---

<Layout title="Doc" description="Doc" locale={locale}>
    <div class="h-full flex gap-4">
        <div class="h-full flex-1" transition:name={doc.id}>
            <Card className="h-full flex-1 bg-gray-50">
                <CardHeader>
                    <CardTitle>
                        {doc.name}
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <article id="input">{doc.markdown}</article>
                </CardContent>
            </Card>
        </div>
        <Card className="h-full flex-1">
            <CardHeader>
                <CardTitle>
                    {doc.name}
                </CardTitle>
            </CardHeader>
            <CardContent className="prose">
                <article id="output">{doc.markdown}</article>
            </CardContent>
        </Card>
    </div>
</Layout>

<script>
    import { standardKeymap, historyKeymap, history } from "@codemirror/commands";
    import { EditorView, keymap } from "@codemirror/view";
    import Markdoc from '@markdoc/markdoc';

    const input = document.getElementById("input");
    const output = document.getElementById("output");
    if (!input || !output) throw new Error();

    const markdown = input.textContent ?? String();
    input.textContent = String();

    const setHTML = (markdown: string) => {
        const ast = Markdoc.parse(markdown);
        const content = Markdoc.transform(ast);
        const html = Markdoc.renderers.html(content);
        output.innerHTML = html;
    };

    setHTML(markdown);
    new EditorView({
        parent: input,
        doc: markdown,
        extensions: [
            EditorView.lineWrapping,
            keymap.of(standardKeymap),
            keymap.of(historyKeymap),
            history(),
            EditorView.updateListener.of(update => {
                // TODO: Probably add debounce
                if (update.docChanged) {
                    setHTML(update.state.doc.toString());
                }
            })
        ]
    });
</script>

<style is:inline>
    .cm-editor.cm-focused {
        outline: none;
    }

    .cm-editor .cm-scroller, .cm-editor .cm-content, .cm-editor .cm-line {
        padding: unset;
        font-family: inherit;
        font-size: inherit;
        font-weight: inherit;
        line-height: inherit;
    }
</style>
