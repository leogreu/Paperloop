---
import "@/styles/globals.css";
import { db, eq, desc, Document } from "astro:db";
import { Card, CardHeader, CardContent, CardFooter } from "@/components/ui/card";

import Layout from "@/components/custom/layout.astro";
import Empty from "@/components/custom/empty.astro";
import DocumentHeader from "@/components/custom/document-header.astro";
import { getPreferredLocale, getTranslations } from "@/utils/i18n";

if (!Astro.locals.user) return Astro.redirect("/auth");

const docs = await db.select().from(Document)
    .where(eq(Document.user, Astro.locals.user.id))
    .orderBy(desc(Document.updated));

const distinct = docs.filter((doc, index) => {
    return index === docs.findIndex(entry => entry.document === doc.document);
});

// Used to provide a language-specific meta alternate link for SEO
const locale = getPreferredLocale(Astro.request.headers);
const i18n = getTranslations(locale);

// TODO: Use Object.groupBy() when available
const defaultTag = i18n("general");
const tags = distinct.reduce<Record<string, typeof docs>>((result, doc) => {
    const [_, match] = doc.name.match(/#(\w+)/) ?? [];
    (result[match ?? defaultTag] ??= []).push(doc);
    return result;
}, {});
---

<Layout title={i18n("my-documents")} locale={locale}>
    {Object.keys(tags).length
        ? <div class="flex flex-col gap-8">
            {Object.entries(tags).sort().map(([tag, docs]) =>
                <div class="flex flex-col gap-4">
                    <div class="py-2 px-4 border rounded-md bg-secondary text-sm font-medium">
                        {tag}
                    </div>
                    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 auto-rows-fr gap-4">
                        {docs.map(doc =>
                            <a href={"docs/" + doc.id} transition:name={doc.id}>
                                <Card className="flex flex-col h-full cursor-pointer">
                                    <CardHeader>
                                        <DocumentHeader doc={doc}></DocumentHeader>
                                    </CardHeader>
                                    <CardContent className="flex-1">
                                        <article class="whitespace-pre-line line-clamp-3">
                                            {doc.markdown.slice(0, 200)}
                                        </article>
                                    </CardContent>
                                    <CardFooter>
                                        <p class="leading-none text-sm text-gray-400">
                                            <time datetime={doc.updated.toISOString()}>&nbsp;</time>
                                        </p>
                                    </CardFooter>
                                </Card>
                            </a>
                        )}
                    </div>
                </div>
            )}
        </div>
        : <Empty>
            <div slot="title">
                {i18n("no-documents")}
            </div>
            <div slot="text">
                {i18n("no-documents-text")}
            </div>
        </Empty>
    }
</Layout>
